[tool.ruff]
line-length = 120
exclude = [".venv", ".pytest_cache", ".ruff_cache", ".git", ".github", "*.ipynb"]
lint.select = ["ALL"]
lint.ignore = [
    "A002",
    "A003",
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ARG001",
    "ARG002",
    "COM812",
    "DTZ007",
    "E501",
    "N806",
    "PLR2004",
    "RUF100",
    "S101",
    "S308",
    "TCH003",
    "TCH002",
    "EXE002",

    # We agreed to have more freedom in writing docstrings.
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    "D203",
    "D213",
    "D205",
    "D400",
    "D415",

    # They won't allow you to use boolean positional arguments.
    "FBT001",
    "FBT002",

    # Don't want to add `from __future__ import annotations`.
    "FA102",

    # I love os.path.
    "PTH118",
    "PTH123",
    "PTH103",

    # Some NumPy stuff i don't like.
    "NPY002",
]
src = ["source"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"test_*.py" = [
    "S101",
    "ANN201",
    "ARG001",
    "ANN001",
    "ANN201",
    "ANN202",
    "ANN201",
    "INP001",
]
"conftest.py" = [
    "S101",
    "ANN201",
    "ARG001",
    "ANN001",
    "ANN201",
    "ANN202",
    "ANN201",
    "INP001",
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.lint.pylint]
max-args = 7

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true